–±–ª—è –±–¥–∞–≤–∞import 'dotenv/config';
import { KufarParser } from './parsers/KufarParser';
import { AdData } from './types';
import { YandexMapsService } from './services/YandexMapsService';

// Simplified version of BotHandler's sendAdWithMap for demonstration
async function displayAd(ad: AdData, yandexMaps: YandexMapsService | null) {
  let message = `
----------------------------------------
`;
  message += `${ad.title}\nüí∞ ${ad.price}`;

  if (ad.published_at) {
    const date = new Date(ad.published_at);
    const formattedDate = date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Europe/Minsk',
    });
    message += `\nüïê ${formattedDate}`;
  }

  const addressParts = [];
  if (ad.location) addressParts.push(ad.location);
  if (ad.address) addressParts.push(ad.address);
  if (addressParts.length > 0) {
    message += `\nüìç ${addressParts.join(', ')}`;
  }

  message += `\nüîó ${ad.ad_url}`;
  console.log(message);

  // Simulate showing map
  if (ad.address && yandexMaps) {
      try {
        const fullAddress = [ad.location, ad.address].filter(Boolean).join(', ');
        const mapUrl = await yandexMaps.getMapForAddress(fullAddress);
        if (mapUrl) {
          console.log(`üó∫Ô∏è –ö–∞—Ä—Ç–∞: –î–∞ (URL –±—ã –±—ã–ª: ${mapUrl.substring(0, 80)}...)`);
        } else {
          console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞: –ù–µ—Ç (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É)');
        }
      } catch (e: any) {
        console.log(`üó∫Ô∏è –ö–∞—Ä—Ç–∞: –û—à–∏–±–∫–∞ (${e.message})`);
      }
  } else {
      console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞: –ù–µ—Ç (—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω)');
  }
  console.log(`----------------------------------------`);
}

async function runTest() {
  console.log('--- –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ü–†–û–ì–û–ù–ê ---');

  const urlsToTest = [
    {
      description: '1. –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ú–∏–Ω—Å–∫–µ)',
      url: 'https://re.kufar.by/l/minsk/snyat/kvartiru/bez-posrednikov?cur=BYR&prc=r%3A500000%2C100000000000&rms=v.or%3A1%2C2'
    },
    {
      description: '2. –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –ú–∏–Ω—Å–∫–µ)',
      url: 'https://www.kufar.by/l/r~minsk/muzykalnye-instrumenty'
    },
    {
      description: '3. –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º',
      url: 'https://www.kufar.by/l/r~minsk/muzykalnye-instrumenty?query=–≥–∏—Ç–∞—Ä–∞'
    }
  ];

  const parser = new KufarParser();
  const yandexApiKey = process.env.YANDEX_MAPS_API_KEY;
  const yandexMaps = yandexApiKey ? new YandexMapsService(yandexApiKey) : null;
  if (!yandexMaps) {
      console.log('\n‚ö†Ô∏è  –ö–ª—é—á YANDEX_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n');
  }

  for (const test of urlsToTest) {
    console.log(`\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${test.description} ---\nURL: ${test.url}\n`);
    try {
      const ads = await parser.parseUrl(test.url);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${ads.length}`);

      if (ads.length > 0) {
        console.log('\nüìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:');
        await displayAd(ads[0], yandexMaps);
      } else {
        console.log('\n‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.');
      }

    } catch (error: any) {
      console.error(`\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: ${error.message}`);
    }
  }
  
  console.log('\n--- –¢–ï–°–¢–û–í–´–ô –ü–†–û–ì–û–ù –ó–ê–í–ï–†–®–ï–ù ---');
}

runTest();
