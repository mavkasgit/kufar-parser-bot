import TelegramBot, { Message, CallbackQuery } from 'node-telegram-bot-api';
import { DatabaseService } from '../database/DatabaseService';
import { UrlValidator } from '../utils/urlValidator';
import { RateLimiter } from '../utils/rateLimiter';
import { ParserFactory } from '../parsers/ParserFactory';
import { Ad } from '../types';
import { logger } from '../utils/logger';

export class BotHandler {
  private bot: TelegramBot;
  private db: DatabaseService;
  private rateLimiter: RateLimiter;
  private userStates: Map<number, string> = new Map();

  constructor(token: string, db: DatabaseService) {
    this.bot = new TelegramBot(token, { polling: true });
    this.db = db;
    this.rateLimiter = new RateLimiter(10, 60000);
    this.setupHandlers();
  }

  private setupHandlers(): void {
    this.bot.on('message', async (msg: Message) => {
      if (!msg.from || !msg.text) return;

      const chatId = msg.chat.id;
      const userId = msg.from.id;

      if (!this.rateLimiter.isAllowed(userId)) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.');
        return;
      }

      if (msg.text === '/start') {
        await this.handleStart(chatId, userId, msg.from.username);
      } else if (this.userStates.get(userId) === 'awaiting_url') {
        await this.handleAddLink(chatId, userId, msg.text);
      }
    });

    this.bot.on('callback_query', async (query: CallbackQuery) => {
      if (!query.message || !query.from) return;

      const chatId = query.message.chat.id;
      const userId = query.from.id;
      const data = query.data;

      if (!this.rateLimiter.isAllowed(userId)) {
        await this.bot.answerCallbackQuery(query.id, { text: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤' });
        return;
      }

      await this.bot.answerCallbackQuery(query.id);

      if (data === 'add_link') {
        await this.handleAddLinkButton(chatId, userId);
      } else if (data === 'my_links') {
        await this.handleMyLinks(chatId, userId);
      } else if (data?.startsWith('delete_')) {
        const linkId = parseInt(data.replace('delete_', ''), 10);
        await this.handleDeleteLink(chatId, linkId);
      }
    });

    this.bot.on('polling_error', (error: Error) => {
      logger.error('Telegram polling error', { error: error.message });
    });

    logger.info('Bot handlers initialized');
  }

  async handleStart(chatId: number, userId: number, username?: string): Promise<void> {
    try {
      await this.db.createUser(userId, username || null);
      
      const keyboard = {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'add_link' }],
          [{ text: 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏', callback_data: 'my_links' }],
        ],
      };

      await this.bot.sendMessage(
        chatId,
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Kufar, Onliner –∏ Realt.\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        { reply_markup: keyboard }
      );

      logger.info('User started bot', { userId, username });
    } catch (error: any) {
      logger.error('Failed to handle /start', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleAddLinkButton(chatId: number, userId: number): Promise<void> {
    try {
      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const linksCount = await this.db.getUserLinksCount(user.id);
      if (linksCount >= 10) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Å—Å—ã–ª–æ–∫. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏.');
        return;
      }

      this.userStates.set(userId, 'awaiting_url');
      await this.bot.sendMessage(
        chatId,
        'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:\n\n' +
        '‚Ä¢ Kufar.by\n' +
        '‚Ä¢ Onliner.by (–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –∏–ª–∏ –ê–≤—Ç–æ)\n' +
        '‚Ä¢ Realt.by'
      );
    } catch (error: any) {
      logger.error('Failed to handle add link button', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  async handleAddLink(chatId: number, userId: number, url: string): Promise<void> {
    try {
      this.userStates.delete(userId);

      const validation = UrlValidator.validateUrl(url);
      if (!validation.valid || !validation.platform) {
        await this.bot.sendMessage(
          chatId,
          '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n' +
          '‚Ä¢ kufar.by/l/*\n' +
          '‚Ä¢ baraholka.onliner.by/* –∏–ª–∏ ab.onliner.by/*\n' +
          '‚Ä¢ realt.by/*'
        );
        return;
      }

      const parser = ParserFactory.getParser(validation.platform);
      if (!parser || !parser.validateUrl(url)) {
        await this.bot.sendMessage(chatId, '‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –ø–ª–æ—â–∞–¥–∫–∏.');
        return;
      }

      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      await this.db.createLink(user.id, url, validation.platform);

      const platformEmoji = {
        kufar: 'üü¢',
        onliner: 'üîµ',
        realt: 'üü†',
      };

      await this.bot.sendMessage(
        chatId,
        `‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n${platformEmoji[validation.platform]} ${validation.platform.toUpperCase()}\n${url}\n\n` +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.'
      );

      logger.info('Link added', { userId, platform: validation.platform, url });
    } catch (error: any) {
      logger.error('Failed to add link', { userId, url, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    }
  }

  async handleMyLinks(chatId: number, userId: number): Promise<void> {
    try {
      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const links = await this.db.getUserLinks(user.id);

      if (links.length === 0) {
        const keyboard = {
          inline_keyboard: [[{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'add_link' }]],
        };
        await this.bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.', { reply_markup: keyboard });
        return;
      }

      const platformEmoji = {
        kufar: 'üü¢',
        onliner: 'üîµ',
        realt: 'üü†',
      };

      for (const link of links) {
        const status = link.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        const keyboard = {
          inline_keyboard: [[{ text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${link.id}` }]],
        };

        await this.bot.sendMessage(
          chatId,
          `${platformEmoji[link.platform]} ${link.platform.toUpperCase()}\n\n` +
          `${link.url}\n\n` +
          `–°—Ç–∞—Ç—É—Å: ${status}`,
          { reply_markup: keyboard }
        );
      }
    } catch (error: any) {
      logger.error('Failed to show links', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫–∏.');
    }
  }

  async handleDeleteLink(chatId: number, linkId: number): Promise<void> {
    try {
      await this.db.deleteLink(linkId);
      await this.bot.sendMessage(chatId, '‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.');
      logger.info('Link deleted', { linkId });
    } catch (error: any) {
      logger.error('Failed to delete link', { linkId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    }
  }

  async sendNotification(chatId: number, ad: Ad): Promise<void> {
    try {
      const message = `üì¢ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n` +
        `${ad.title}\n\n` +
        `üí∞ ${ad.price || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
        `üîó ${ad.ad_url}`;

      if (ad.image_url) {
        await this.bot.sendPhoto(chatId, ad.image_url, { caption: message });
      } else {
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error: any) {
      if (error.response?.statusCode === 403) {
        logger.warn('User blocked bot', { chatId });
      } else {
        logger.error('Failed to send notification', { chatId, error: error.message });
      }
    }
  }

  stop(): void {
    this.bot.stopPolling();
    logger.info('Bot stopped');
  }
}
