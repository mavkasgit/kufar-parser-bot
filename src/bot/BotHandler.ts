import TelegramBot, { Message, CallbackQuery } from 'node-telegram-bot-api';
import { DatabaseService } from '../database/DatabaseService';
import { UrlValidator } from '../utils/urlValidator';
import { RateLimiter } from '../utils/rateLimiter';
import { ParserFactory } from '../parsers/ParserFactory';
import { YandexMapsService } from '../services/YandexMapsService';
import { Ad, Platform, AdData } from '../types';
import { logger } from '../utils/logger';

export class BotHandler {
  private bot: TelegramBot;
  private db: DatabaseService;
  private rateLimiter: RateLimiter;
  private userStates: Map<number, string> = new Map();
  private yandexMaps: YandexMapsService | null = null;
  private adCache: Map<string, AdData> = new Map(); // –ö—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –∫–∞—Ä—Ç–µ

  constructor(token: string, db: DatabaseService) {
    this.bot = new TelegramBot(token, { polling: true });
    this.db = db;
    this.rateLimiter = new RateLimiter(10, 60000);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Yandex Maps –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
    const yandexApiKey = process.env.YANDEX_MAPS_API_KEY;
    if (yandexApiKey) {
      this.yandexMaps = new YandexMapsService(yandexApiKey);
      logger.info('Yandex Maps service initialized');
    } else {
      logger.warn('YANDEX_MAPS_API_KEY not set, map features disabled');
    }
    
    this.setupHandlers();
  }

  private getMainKeyboard() {
    return {
      keyboard: [
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É' }],
        [{ text: 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏' }, { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏' }],
      ],
      resize_keyboard: true,
      persistent: true,
    };
  }

  private setupHandlers(): void {
    this.bot.on('message', async (msg: Message) => {
      if (!msg.from || !msg.text) return;

      const chatId = msg.chat.id;
      const userId = msg.from.id;

      if (!this.rateLimiter.isAllowed(userId)) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.');
        return;
      }

      if (msg.text === '/start') {
        await this.handleStart(chatId, userId, msg.from.username);
      } else if (msg.text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É') {
        await this.handleAddLinkButton(chatId, userId);
      } else if (msg.text === 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏') {
        await this.handleMyLinks(chatId, userId);
      } else if (msg.text === 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏') {
        await this.handleDeleteAllLinks(chatId, userId);
      } else if (this.userStates.get(userId) === 'awaiting_url') {
        await this.handleAddLink(chatId, userId, msg.text);
      }
    });

    this.bot.on('callback_query', async (query: CallbackQuery) => {
      if (!query.message || !query.from) return;

      const chatId = query.message.chat.id;
      const userId = query.from.id;
      const data = query.data;

      if (!this.rateLimiter.isAllowed(userId)) {
        await this.bot.answerCallbackQuery(query.id, { text: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤' });
        return;
      }

      await this.bot.answerCallbackQuery(query.id);

      if (data === 'add_link') {
        await this.handleAddLinkButton(chatId, userId);
      } else if (data === 'my_links') {
        await this.handleMyLinks(chatId, userId);
      } else if (data?.startsWith('delete_')) {
        const linkId = parseInt(data.replace('delete_', ''), 10);
        await this.handleDeleteLink(chatId, linkId);
      } else if (data === 'delete_all') {
        await this.handleDeleteAllLinks(chatId, userId);
      } else if (data === 'confirm_delete_all') {
        await this.handleConfirmDeleteAll(chatId, userId);
      } else if (data === 'cancel_delete_all') {
        await this.handleCancelDeleteAll(chatId);
      } else if (data?.startsWith('check_')) {
        const linkId = parseInt(data.replace('check_', ''), 10);
        await this.handleCheckLink(chatId, linkId);
      } else if (data?.startsWith('map_')) {
        const adId = data.replace('map_', '');
        await this.handleShowMap(chatId, adId);
      }
    });

    this.bot.on('polling_error', (error: Error) => {
      logger.error('Telegram polling error', { error: error.message });
    });

    logger.info('Bot handlers initialized');
  }

  async handleStart(chatId: number, userId: number, username?: string): Promise<void> {
    try {
      await this.db.createUser(userId, username || null);

      await this.bot.sendMessage(
        chatId,
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Kufar –∏ Onliner.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏.',
        { reply_markup: this.getMainKeyboard() }
      );

      logger.info('User started bot', { userId, username });
    } catch (error: any) {
      logger.error('Failed to handle /start', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleAddLinkButton(chatId: number, userId: number): Promise<void> {
    try {
      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const linksCount = await this.db.getUserLinksCount(user.id);
      if (linksCount >= 10) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Å—Å—ã–ª–æ–∫. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏.');
        return;
      }

      this.userStates.set(userId, 'awaiting_url');

      await this.bot.sendMessage(
        chatId,
        'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:\n\n' +
        '‚Ä¢ Kufar.by - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n' +
        '‚Ä¢ Onliner.by - –ë–∞—Ä–∞—Ö–æ–ª–∫–∞, –ê–≤—Ç–æ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞), –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∫–∞—Ä—Ç–∞)\n\n' +
        '‚ö†Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!',
        { reply_markup: this.getMainKeyboard() }
      );
    } catch (error: any) {
      logger.error('Failed to handle add link button', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  async handleAddLink(chatId: number, userId: number, url: string): Promise<void> {
    try {
      this.userStates.delete(userId);

      // Handle cancel
      if (url === '‚ùå –û—Ç–º–µ–Ω–∞') {
        const keyboard = {
          keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É' }, { text: 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏' }],
          ],
          resize_keyboard: true,
          persistent: true,
        };
        await this.bot.sendMessage(chatId, '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.', { reply_markup: keyboard });
        return;
      }

      const validation = UrlValidator.validateUrl(url);
      if (!validation.valid || !validation.platform) {
        const errorMsg = validation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞';
        await this.bot.sendMessage(
          chatId,
          `‚ùå ${errorMsg}\n\n` +
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞:\n' +
          '‚Ä¢ kufar.by/l/* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)\n' +
          '‚Ä¢ ab.onliner.by/brand/model (–±–µ–∑ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è)\n' +
          '‚Ä¢ baraholka.onliner.by/* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n' +
          '‚Ä¢ r.onliner.by/ak/ (–∫–∞—Ä—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)\n' +
          '‚Ä¢ av.by/cars/* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞)'
        );
        return;
      }

      const parser = ParserFactory.getParser(validation.platform);
      if (!parser || !parser.validateUrl(url)) {
        await this.bot.sendMessage(chatId, '‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –ø–ª–æ—â–∞–¥–∫–∏.');
        return;
      }

      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const existingLinks = await this.db.getUserLinks(user.id);
      const isDuplicate = existingLinks.some(link => link.url === url);
      if (isDuplicate) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        return;
      }

      // Test parsing before adding link
      await this.bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...');
      
      let testAds: AdData[] = [];
      try {
        testAds = await parser.parseUrl(url);
        
        if (testAds.length === 0) {
          await this.bot.sendMessage(
            chatId, 
            '‚ùå –ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n' +
            '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
            '‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n' +
            '‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n' +
            '‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.'
          );
          return;
        }
      } catch (error: any) {
        logger.error('Failed to test parse link', { userId, url, error: error.message });
        await this.bot.sendMessage(
          chatId,
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É.\n\n' +
          `–û—à–∏–±–∫–∞: ${error.message}\n\n` +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
        );
        return;
      }

      // Link is valid, add it to database
      await this.db.createLink(user.id, url, validation.platform);

      const platformEmoji: Record<Platform, string> = {
        kufar: 'üü¢',
        onliner: 'üîµ',
      };

      const keyboard = {
        keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É' }, { text: 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏' }],
        ],
        resize_keyboard: true,
        persistent: true,
      };

      await this.bot.sendMessage(
        chatId,
        `‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n${platformEmoji[validation.platform]} ${validation.platform.toUpperCase()}\n${url}\n\n` +
        `–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${testAds.length}\n\n` +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.',
        { reply_markup: keyboard }
      );

      // Show last 5 ads as preview
      const previewAds = testAds.slice(0, 5);
      await this.bot.sendMessage(chatId, `üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${previewAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:`);
      
      for (const ad of previewAds) {
        await this.sendAdWithMap(chatId, ad);
      }

      logger.info('Link added', { userId, platform: validation.platform, url, adsFound: testAds.length });
    } catch (error: any) {
      logger.error('Failed to add link', { userId, url, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    }
  }

  async handleMyLinks(chatId: number, userId: number): Promise<void> {
    try {
      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const links = await this.db.getUserLinks(user.id);

      if (links.length === 0) {
        const keyboard = {
          inline_keyboard: [[{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'add_link' }]],
        };
        await this.bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.', { reply_markup: keyboard });
        return;
      }

      const platformEmoji: Record<Platform, string> = {
        kufar: 'üü¢',
        onliner: 'üîµ',
      };

      for (const link of links) {
        // Skip unsupported platforms (like old 'realt' links)
        if (!platformEmoji[link.platform as Platform]) {
          continue;
        }
        
        const status = link.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        const keyboard = {
          inline_keyboard: [
            [
              { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `check_${link.id}` },
              { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${link.id}` }
            ]
          ],
        };

        await this.bot.sendMessage(
          chatId,
          `${platformEmoji[link.platform as Platform]} ${link.platform.toUpperCase()}\n\n` +
          `${link.url}\n\n` +
          `–°—Ç–∞—Ç—É—Å: ${status}`,
          { reply_markup: keyboard }
        );
      }
    } catch (error: any) {
      logger.error('Failed to show links', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫–∏.');
    }
  }

  async handleDeleteLink(chatId: number, linkId: number): Promise<void> {
    try {
      await this.db.deleteLink(linkId);
      await this.bot.sendMessage(chatId, '‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.');
      logger.info('Link deleted', { linkId });
    } catch (error: any) {
      logger.error('Failed to delete link', { linkId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    }
  }

  async handleDeleteAllLinks(chatId: number, userId: number): Promise<void> {
    try {
      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const links = await this.db.getUserLinks(user.id);
      
      if (links.length === 0) {
        await this.bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
        return;
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmKeyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ', callback_data: 'confirm_delete_all' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_delete_all' }
          ]
        ],
      };

      await this.bot.sendMessage(
        chatId,
        `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ ${links.length} —Å—Å—ã–ª–æ–∫?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
        { reply_markup: confirmKeyboard }
      );
    } catch (error: any) {
      logger.error('Failed to handle delete all links', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  async handleConfirmDeleteAll(chatId: number, userId: number): Promise<void> {
    try {
      const user = await this.db.getUser(userId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const links = await this.db.getUserLinks(user.id);
      
      for (const link of links) {
        await this.db.deleteLink(link.id);
      }

      await this.bot.sendMessage(
        chatId,
        `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫.`,
        { reply_markup: this.getMainKeyboard() }
      );
      
      logger.info('All links deleted', { userId, count: links.length });
    } catch (error: any) {
      logger.error('Failed to delete all links', { userId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫–∏.');
    }
  }

  async handleCancelDeleteAll(chatId: number): Promise<void> {
    try {
      await this.bot.sendMessage(
        chatId,
        '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        { reply_markup: this.getMainKeyboard() }
      );
    } catch (error: any) {
      logger.error('Failed to cancel delete all', { error: error.message });
    }
  }

  async handleCheckLink(chatId: number, linkId: number): Promise<void> {
    try {
      const link = await this.db.getLink(linkId);
      if (!link) {
        await this.bot.sendMessage(chatId, '‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      await this.bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...');

      const parser = ParserFactory.getParser(link.platform as Platform);
      if (!parser) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const ads = await parser.parseUrl(link.url);
      const previewAds = ads.slice(0, 5);

      await this.bot.sendMessage(chatId, `üìã –ù–∞–π–¥–µ–Ω–æ ${ads.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${previewAds.length}:`);

      for (const ad of previewAds) {
        await this.sendAdWithMap(chatId, ad);
      }

      logger.info('Link checked', { linkId, adsFound: ads.length });
    } catch (error: any) {
      logger.error('Failed to check link', { linkId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    }
  }

  private async sendAdWithMap(chatId: number, ad: AdData): Promise<void> {
    let message = `${ad.title}\nüí∞ ${ad.price}`;
    
    if (ad.published_at) {
      const date = new Date(ad.published_at);
      const formattedDate = date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
      message += `\nüïê ${formattedDate}`;
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º location –∏ address –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    const addressParts = [];
    if (ad.location) addressParts.push(ad.location);
    if (ad.address) addressParts.push(ad.address);
    if (addressParts.length > 0) {
      message += `\nüìç ${addressParts.join(', ')}`;
    }
    
    message += `\nüîó ${ad.ad_url}`;
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await this.bot.sendMessage(chatId, message);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞
    const media: any[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if (ad.image_url) {
      media.push({
        type: 'photo',
        media: ad.image_url,
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å –∞–¥—Ä–µ—Å
    if ((ad.location || ad.address) && this.yandexMaps) {
      try {
        const addressParts = [];
        if (ad.location) addressParts.push(ad.location);
        if (ad.address) addressParts.push(ad.address);
        const fullAddress = addressParts.join(', ');
        
        const mapUrl = await this.yandexMaps.getMapForAddress(fullAddress);
        if (mapUrl) {
          media.push({
            type: 'photo',
            media: mapUrl,
          });
        }
      } catch (error: any) {
        logger.warn('Failed to get map', { error: error.message });
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if (media.length > 0) {
      try {
        await this.bot.sendMediaGroup(chatId, media);
      } catch (error: any) {
        logger.warn('Failed to send media group', { error: error.message });
      }
    }
  }

  async sendNotification(chatId: number, ad: Ad): Promise<void> {
    try {
      const message = `üì¢ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n` +
        `${ad.title}\n\n` +
        `üí∞ ${ad.price || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
        `üîó ${ad.ad_url}`;

      if (ad.image_url) {
        await this.bot.sendPhoto(chatId, ad.image_url, { caption: message });
      } else {
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error: any) {
      if (error.response?.statusCode === 403) {
        logger.warn('User blocked bot', { chatId });
      } else {
        logger.error('Failed to send notification', { chatId, error: error.message });
      }
    }
  }

  async handleShowMap(chatId: number, adId: string): Promise<void> {
    try {
      if (!this.yandexMaps) {
        await this.bot.sendMessage(chatId, '‚ùå –§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
        return;
      }

      const ad = this.adCache.get(adId);
      if (!ad) {
        await this.bot.sendMessage(chatId, '‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      const addressParts = [];
      if (ad.location) addressParts.push(ad.location);
      if (ad.address) addressParts.push(ad.address);
      
      const fullAddress = addressParts.join(', ');
      if (!fullAddress) {
        await this.bot.sendMessage(chatId, '‚ùå –ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.');
        return;
      }

      await this.bot.sendMessage(chatId, 'üîç –ò—â—É –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ...');

      // –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞—Ä—Ç—ã
      const mapImageUrl = await this.yandexMaps.getMapImageForAddress(fullAddress);
      
      if (!mapImageUrl) {
        await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞—Ä—Ç—ã
      await this.bot.sendPhoto(chatId, mapImageUrl, {
        caption: `üìç ${fullAddress}\n\n${ad.title}\nüí∞ ${ad.price}\nüîó ${ad.ad_url}`,
      });

      logger.info('Map sent successfully', { adId, address: fullAddress });
    } catch (error: any) {
      logger.error('Failed to show map', { adId, error: error.message });
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã.');
    }
  }

  stop(): void {
    this.bot.stopPolling();
    logger.info('Bot stopped');
  }
}
