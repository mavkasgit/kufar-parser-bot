const axios = require('axios');

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
const tests = [
  { name: '–ú–∏–Ω—Å–∫', rgn: '7', expected: '–ú–∏–Ω—Å–∫' },
  { name: '–ë—Ä–µ—Å—Ç', rgn: '1', expected: '–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
  { name: '–í–∏—Ç–µ–±—Å–∫', rgn: '6', expected: '–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
  { name: '–ì–æ–º–µ–ª—å', rgn: '2', expected: '–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
  { name: '–ì—Ä–æ–¥–Ω–æ', rgn: '3', expected: '–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
  { name: '–ú–æ–≥–∏–ª–µ–≤', rgn: '4', expected: '–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
  { name: '–ú–∏–Ω—Å–∫–∞—è –æ–±–ª', rgn: '5', expected: '–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
];

async function testRegion(test) {
  try {
    const response = await axios.get('https://api.kufar.by/search-api/v2/search/rendered-paginated', {
      params: {
        size: 3,
        sort: 'lst.d',
        cat: '1010',
        typ: 'let',
        rgn: test.rgn
      },
      headers: {
        'User-Agent': 'Mozilla/5.0',
        'accept': 'application/json',
      },
    });

    const ads = response.data?.ads || [];
    if (ads.length > 0) {
      const regionParam = ads[0].ad_parameters?.find(p => p.p === 'region');
      const actualRegion = regionParam?.vl || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      
      const match = actualRegion === test.expected;
      const icon = match ? '‚úÖ' : '‚ùå';
      
      console.log(`${icon} rgn=${test.rgn} (${test.name}): ${actualRegion} ${match ? '' : `(–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected})`}`);
      
      return match;
    } else {
      console.log(`‚ö†Ô∏è  rgn=${test.rgn} (${test.name}): –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå rgn=${test.rgn} (${test.name}): –æ—à–∏–±–∫–∞ - ${error.message}`);
    return false;
  }
}

async function runTests() {
  console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–û–ù–û–í KUFAR API\n');
  
  const results = [];
  for (const test of tests) {
    const result = await testRegion(test);
    results.push(result);
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  const passed = results.filter(r => r === true).length;
  const failed = results.filter(r => r === false).length;
  const skipped = results.filter(r => r === null).length;
  
  console.log(`\n${'='.repeat(60)}`);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ‚úÖ ${passed} —É—Å–ø–µ—à–Ω–æ | ‚ùå ${failed} –æ—à–∏–±–æ–∫ | ‚ö†Ô∏è  ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
  console.log('='.repeat(60));
  
  if (failed === 0 && passed > 0) {
    console.log('‚úÖ –í–°–ï –†–ï–ì–ò–û–ù–´ –ö–û–†–†–ï–ö–¢–ù–´!');
  } else if (failed > 0) {
    console.log('‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –ú–ê–ü–ü–ò–ù–ì–ï –†–ï–ì–ò–û–ù–û–í!');
  }
}

runTests();
